@inject IFileReaderService fileReader;
@inject ISnackbar Snackbar
@inject IProductService ProductService
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        @if (product.Image != string.Empty)
        {
        <div class="d-flex justify-content-center">
            <MudImage Src="@product.Image" Width="200" Height="150" 
            Alt="Swedish Farm House" Elevation="25" Class="rounded-lg ma-4 m-auto"/>
        </div>
        }
        <EditForm Model="@product" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCardContent>
                        <MudTextField Label="Name" 
                            @bind-Value="product.Name"/>
                            <ValidationMessage  For="@(() => product.Name)" />
                            
                        <MudTextField Label="Description" 
                            @bind-Value="product.Description" Lines="3"  />
                            <ValidationMessage  For="@(() => product.Description)" />

                       <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" 
                           T="string" Label="Categories" MultiSelection="true" @bind-SelectedValues="product.categorySelected">
                            @foreach (var category in Categories)
                            {
                               <MudSelectItem T="string" Value="@category.Id.ToString()">@category.Name</MudSelectItem>
                            }
                        </MudSelect>
                            <ValidationMessage  For="@(() => product.categorySelected)" />
                         <MudNumericField Label="Price" 
                            @bind-Value="product.Price" Class="pt-5"  />
                            <ValidationMessage  For="@(() => product.Price)"/>

                         <input type="file" id="fileInput" @onchange="async () => await UploadFiles()" hidden @ref="elementReference"  />
                         <MudButton HtmlTag="label"
                                   Variant="Variant.Outlined"
                                   Color="Color.Secondary"
                                   StartIcon="@Icons.Filled.CloudUpload"
                                   for="fileInput"
                                   Class="mt-5">
                            Upload Files
                        </MudButton>
                        <ValidationMessage For="@(() => product.Image)" />
                        
                        <br />
                        <div class="d-flex justify-content-end gap-3">
                            <MudButton OnClick="Cancel">Cancel</MudButton>
                            <MudButton  Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">
                                @if (isLoading) {
                                    <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                                } else {
                                    <span>Update</span>
                                }
                            </MudButton>
                        </div>
                    </MudCardContent>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public bool IsEdit { get; set; } = false;
    [Parameter] public Product Product { get; set; } = new Product();
    [Parameter] public List<Category> Categories { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private bool isLoading = false;
    private bool IsImageUpdate = false;

    void Cancel() => MudDialog.Cancel();

    ElementReference elementReference;
    Stream fileStream = null;
    string fileName = "";

    ProductUpdateVMC product = new ProductUpdateVMC();
    IList<IBrowserFile> files = new List<IBrowserFile>();

    protected async override void OnInitialized()
    {
        if (IsEdit)
        {
            product.Id = Product.Id;
            product.Name = Product.Name;
            product.Description = Product.Description;
            product.Price = (int) Product.Price;
            product.Image = $"{Http.BaseAddress}{Product.Image}";
            product.categorySelected = Product.Categories.Select(x => x.Id.ToString()).ToList();
        }
    }

    private async Task UploadFiles()
    {
        var format = "image/png";

        Console.WriteLine($"elem => {elementReference}");
        // GET IMAGE
        var file = (await fileReader.CreateReference(elementReference).EnumerateFilesAsync()).FirstOrDefault();
        if (file == null) return;

        // Validation only image
        var fileInfo = await file.ReadFileInfoAsync();
        fileName = fileInfo.Name;
        product.Image = string.Empty;
        if (fileInfo.Type == "image/jpeg" || fileInfo.Type == "image/png")
        {
            // Preview Image
            // create base64 from variable file
            var fileStream123 = await file.OpenReadAsync();
            var buffer = new byte[fileStream123.Length];
            await fileStream123.ReadAsync(buffer);
            var imageData = $"data:{format};base64, {Convert.ToBase64String(buffer)}";
            
            product.Image = imageData;
            IsImageUpdate = true;
            
            using (var memoryStream = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
            {
                fileStream = new MemoryStream(memoryStream.ToArray());
            }
        } else {
            Snackbar.Add("Invalid file type, only jpeg/png!", Severity.Error);
            return;
        }
    }


    private async Task HandleSubmit()
    {
        isLoading = true;
        
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");

        if (IsImageUpdate)
        {
            content.Add(new StreamContent(fileStream, (int)fileStream.Length), "Image", fileName);
        }
        
        content.Add(new StringContent(product.Id.ToString()), "Id");
        content.Add(new StringContent(product.Name), "Name");
        content.Add(new StringContent(product.Description), "Description");
        foreach (var item in product.categorySelected)
        {
            content.Add(new StringContent(item), "CategoriesId");
        }
        content.Add(new StringContent(product.Price.ToString()), "Price");
        content.Add(new StringContent(IsImageUpdate.ToString()), "IsImageUpdate");

        var result = await ProductService.UpdateProductAsync(content);

        if (result.Success)
        {
            MudDialog.Close(DialogResult.Ok<bool>(true));
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error);
        }
        
        isLoading = false;
    }

    public string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} categor{(selectedValues.Count > 1 ? "ies have":"y has")} been selected";
    }

}